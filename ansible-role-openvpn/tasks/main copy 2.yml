---
- name: Update apt packages
  become: true
  apt:
    upgrade: yes

- name: Install openvpn
  package:
   name: "{{ item }}"
   state: present
  with_items:
    - openvpn
    - easy-rsa

- name: "Remove CA directory"
  become: yes
  file:
    state: absent
    path: "{{ ansible_env.HOME }}/openvpn-ca/"

- name: "Create CA dir"
  become: yes
  command: make-cadir {{ ansible_env.HOME }}/openvpn-ca

- name: Customize CA variable configuration
  lineinfile:
    dest: "{{ ansible_env.HOME }}/openvpn-ca/vars"
    regexp: "^{{ item.property | regex_escape() }}="
    line: "{{ item.property }}={{ item.value }}"
  with_items:
    - { property: 'export KEY_NAME', value: '"server"' }
    - { property: 'export KEY_COUNTRY', value: '"US"' }
    - { property: 'export KEY_PROVINCE', value: '"CA"' }
    - { property: 'export KEY_CITY', value: '"SF"' }
    - { property: 'export KEY_ORG', value: '"MT"' }
    - { property: 'export KEY_EMAIL', value: '"mt@mt.com"' }
    - { property: 'export KEY_OU', value: '"MT"' }
    - { property: 'export KEY_CONFIG', value: '{{ ansible_env.HOME }}/openvpn-ca/openssl-1.0.0.cnf' }
    - { property: 'export KEY_DIR', value: '{{ ansible_env.HOME }}/openvpn-ca/keys' }

- name: "Build the certificate authority"
  become: yes
  shell: >
    source vars;
    ./clean-all;
    yes "" | ./build-ca;
  args: 
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: "Build server certificate"
  become: yes
  shell: >
    source vars;
    ./build-key-server --batch server;
  args: 
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

######### ^^^ done




- name: "Build Diffie-Hellman parameters and key generation"
  become: yes
  shell: >
    source vars;
    yes "" | ./build-dh;
    openvpn --genkey --secret keys/ta.key;
  args: 
    chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
    executable: /bin/bash

- name: "Copy key and certificates to /etc/openvpn"
  become: yes
  copy:
    remote_src: yes
    src: "{{ ansible_env.HOME }}/openvpn-ca/keys/{{ item }}"
    dest: "/etc/openvpn/"
  with_items:
    - "ca.crt"
    - "server.crt"
    - "server.key"
    - "ta.key"
    - "dh2048.pem"

- name: "Generate server.conf from sample config"
  become: yes
  shell: >
     gzip -d -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf > /dev/null

- name: Adjust OpenVPN server configuration
  lineinfile:
    dest: "/etc/openvpn/server.conf"
    regexp: "^{{ item.regex | regex_escape() }}"
    line: "{{ item.value }}"
  with_items:
    - { regex: ';user nobody', value: 'user nobody' }
    - { regex: ';group nogroup', value: 'group nogroup' }
    - { regex: ';push "redirect-gateway def1 bypass-dhcp"', value: 'push "redirect-gateway def1 bypass-dhcp"' }
    - { regex: 'cert server.crt', value: 'cert server.crt' }
    - { regex: 'key server.key', value: 'key server.key' }

- name: Configuration IP forwarding
  become: true
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

- name: Add ufw before content
  become: true
  blockinfile:
    path: /etc/ufw/before.rules
    insertbefore: BOF
    content: |
      # NAT table rules
      *nat
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE
      COMMIT

- name: Customize ufw forwarding policy
  become: true
  lineinfile:
    line: "DEFAULT_FORWARD_POLICY=\"ACCEPT\""
    path: "/etc/default/ufw"
    regexp: "^DEFAULT_FORWARD_POLICY=\"DROP\""

- name: Open ufw ports for openvpn and ssh
  become: true
  shell:  ufw allow openvpn && ufw allow OpenSSH

- name: Enable ufw
  become: true
  shell: ufw --force enable

- name: Start openvpn systemd service
  become: true
  systemd:
    name: openvpn@server
    state: started
    daemon_reload: yes
    enabled: yes



# ---
# - name: Update apt packages
#   become: true
#   apt:
#     upgrade: yes

# - name: Install openvpn
#   package:
#    name: "{{ item }}"
#    state: present
#   with_items:
#     - openvpn
#     - easy-rsa

# # - name: "Remove CA directory"
# #   become: yes
# #   file:
# #     state: absent
# #     path: "{{ ansible_env.HOME }}/openvpn-ca/"

# # - name: "Create CA dir"
# #   become: yes
# #   command: make-cadir {{ ansible_env.HOME }}/openvpn-ca
# # - name: Print version
# #   debug:
# #     msg: "{{ ansible_env.HOME }}"

# # # - name: Install OpenVPN deps
# # #   become: true
# # #   apt:
# # #     name: "{{ item }}"
# # #     state: present
# # #   loop:
# # #     - openvpn
# # #     - easy-rsa
# # - name: OpenVPN | PKI | EasyRSA Checkout
# #   git:
# #     repo: https://github.com/OpenVPN/easy-rsa.git
# #     accept_hostkey: True
# #     remote: github
# #     version: "{{ openvpn_easyrsa_version }}"
# #     dest: "{{ openvpn_ca_dir }}/easyrsa"

# # - name: Print version
# #   debug:
# #     msg: "{{ openvpn_ca_dir }}"

# # # - name: "Remove CA directory"
# # #   become: yes
# # #   file:
# # #     state: absent
# # #     path: '{{ openvpn_ca_dir }}/'

# # # - name: "Setting up CA"
# # #   command: make-cadir {{ openvpn_ca_dir }}
# # #   args:
# # #     creates: '{{ openvpn_ca_dir }}/vars'

# - name: OpenVPN | PKI | Generate CA password
#   shell: echo "$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c15)"
#   no_log: true
#   register: ca_password_result
#   when: ca_password is not defined

# - name: OpenVPN | PKI | Set CA password variable
#   set_fact:
#     ca_password: "{{ ca_password_result.stdout }}"
#   when: ca_password is not defined


# - name: "Build root CA certificate"
#   shell:  'yes "yes" | sudo ./easyrsa init-pki && yes "{{ ca_password }}" | sudo ./easyrsa build-ca'
#   args:
#     chdir: '{{ openvpn_ca_dir }}'

    
# - name: "Setting openssl config file path"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_CONFIG' 
#     line: 'export KEY_CONFIG="{{ openssl_easyrsa_default_config }}"'

# - name: "Setting the CA properties country"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_COUNTRY' 
#     line: 'export KEY_COUNTRY="{{ openvpn_key_country }}"'

# - name: "Setting the CA properties province"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_PROVINCE' 
#     line: 'export KEY_PROVINCE="{{ openvpn_key_province }}"'

# - name: "Setting the CA properties city"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_CITY' 
#     line: 'export KEY_CITY="{{ openvpn_key_city }}"'

# - name: "Setting the CA properties organization"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_ORG' 
#     line: 'export KEY_ORG="{{ openvpn_key_org }}"'

# - name: "Setting the CA properties email"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_EMAIL' 
#     line: 'export KEY_EMAIL="{{ openvpn_key_email }}"'     

# - name: "Setting the CA properties OU"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_OU' 
#     line: 'export KEY_OU="Community"'     

# - name: "Setting the CA properties name"
#   lineinfile: 
#     path: '{{ openvpn_ca_dir }}/vars'
#     regexp: 'KEY_NAME' 
#     line: 'export KEY_NAME="{{ openvpn_key_name }}"'   



# - name: "Start clean"
#   shell: 'yes "yes" | {{ openvpn_ca_dir }}/easyrsa clean-all'
      
# - name: "Build root CA certificate"
#   shell:  'yes "yes" | ./easyrsa init-pki && yes "{{ ca_password }}" | ./easyrsa build-ca'
#   args:
#     chdir: '{{ openvpn_ca_dir }}'

# - name: "Build CRL"

#   shell: yes "{{ ca_password }}" | ./easyrsa gen-crl
#   args:
#     chdir: '{{ openvpn_ca_dir }}'

# - name: "Build server certificate"

#   expect:
#     command: './easyrsa build-server-full {{ server_name }}'
#     responses:
#       "PEM pass phrase": "{{ ca_password }}"
#       "request details": 'yes'
#       "private/ca.key": "{{ ca_password }}"
#   args:
#     chdir: '{{ openvpn_ca_dir }}'



# # # - name: "Build DH"
# # #   # expect:
# # #   #   command: ./easyrsa gen-dh
# # #   #   responses:
# # #   #     "Overwrite": 'yes'
# # #   #   timeout: 300 
# # #   shell: ./easyrsa gen-dh
# # #   args:
# # #     chdir: '{{ openvpn_ca_dir }}'


# # # - name: OpenVPN | PKI | Build ta.key
# # #   shell: openvpn --genkey --secret ta.key
# # #   args:
# # #     chdir: '{{ openvpn_ca_pki_dir }}'


# # # # - name: OpenVPN | Add Clients | Get CA cert
# # # #   fetch:
# # # #     src: '{{ openvpn_ca_cert }}'
# # # #     dest: "{{ playbook_dir }}/../fetched_creds/test/ca.crt"
# # # #     flat: yes

# # # - name: OpenVPN | Add Clients | Get CA cert
# # #   fetch:
# # #     src: "{{ openvpn_ca_cert }}"
# # #     dest: "{{ local_creds_folder }}/ca@{{server_name}}.crt"
# # #     flat: yes

# # # # - name: "CP creds to /etc/openvpn"
# # # #   become: yes
# # # #   copy:
# # # #     remote_src: yes
# # # #     src: "{{ ansible_env.HOME }}/openvpn-ca/keys/{{ item }}"
# # # #     dest: "/etc/openvpn/"
# # # #   with_items:
# # # #     - "ca.crt"
# # # #     - "server.crt"
# # # #     - "server.key"
# # # #     - "ta.key"
# # # #     - "dh2048.pem"


# # # # # #### OpenVPN setup

# # # # # - name: OpenVPN | sysctl | Enable IPv4 traffic forwarding
# # # # #   sysctl:
# # # # #     name: net.ipv4.ip_forward
# # # # #     value: 1

# # # # # - name: OpenVPN | Configuration | Copy OpenVPN server configuration files into place
# # # # #   template:
# # # # #     src: etc_openvpn_server.conf.j2
# # # # #     dest: "{{ openvpn_ca_dir }}/{{ item.proto }}-{{ item.port }}.conf"
# # # # #   with_items: "{{ openvpn_instances }}"


# # # # # - name: OpenVPN | systemd | Enable services
# # # # #   service:
# # # # #     name: "openvpn@{{ item.proto }}-{{ item.port }}.service"
# # # # #     enabled: true
# # # # #   # shell: sudo systemctl enable openvpn@{{ item.proto }}-{{ item.port }}.service
# # # # #   with_items: "{{ openvpn_instances }}"




