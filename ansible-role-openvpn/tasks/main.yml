---
- name: Install OpenVPN deps
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - openvpn
    - easy-rsa
# - name: "Remove CA directory"
#   file:
#     state: absent
#     path: "~/openvpn-ca/"
- name: "Setting up CA"
  command: make-cadir {{ openvpn_ca_dir }}
  args:
    creates: '{{ openvpn_ca_dir }}/vars'
- name: OpenVPN | PKI | Generate CA password
  shell: echo "$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c15)"
  no_log: true
  register: ca_password_result
  when: ca_password is not defined

- name: OpenVPN | PKI | Set CA password variable
  set_fact:
    ca_password: "{{ ca_password_result.stdout }}"
  when: ca_password is not defined

- name: "Start clean"
  shell: 'yes "yes" | {{ openvpn_ca_dir }}/easyrsa clean-all'
      
- name: "Build root CA certificate"
  shell:  'yes "yes" | ./easyrsa init-pki && yes "{{ ca_password }}" | ./easyrsa build-ca'
  args:
    chdir: '{{ openvpn_ca_dir }}'
    
- name: "Setting openssl config file path"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_CONFIG' 
    line: 'export KEY_CONFIG="{{ openssl_easyrsa_default_config }}"'

- name: "Setting the CA properties country"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_COUNTRY' 
    line: 'export KEY_COUNTRY="{{ openvpn_key_country }}"'

- name: "Setting the CA properties province"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_PROVINCE' 
    line: 'export KEY_PROVINCE="{{ openvpn_key_province }}"'

- name: "Setting the CA properties city"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_CITY' 
    line: 'export KEY_CITY="{{ openvpn_key_city }}"'

- name: "Setting the CA properties organization"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_ORG' 
    line: 'export KEY_ORG="{{ openvpn_key_org }}"'

- name: "Setting the CA properties email"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_EMAIL' 
    line: 'export KEY_EMAIL="{{ openvpn_key_email }}"'     

- name: "Setting the CA properties OU"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_OU' 
    line: 'export KEY_OU="Community"'     

- name: "Setting the CA properties name"
  lineinfile: 
    path: '{{ openvpn_ca_dir }}/vars'
    regexp: 'KEY_NAME' 
    line: 'export KEY_NAME="{{ openvpn_key_name }}"'   



- name: "Build CRL"

  shell: yes "{{ ca_password }}" | ./easyrsa gen-crl
  args:
    chdir: '{{ openvpn_ca_dir }}'

- name: "Build server certificate"

  expect:
    command: './easyrsa build-server-full {{ server_name }}'
    responses:
      "PEM pass phrase": "{{ ca_password }}"
      "request details": 'yes'
      "private/ca.key": "{{ ca_password }}"
  args:
    chdir: '{{ openvpn_ca_dir }}'

- name: OpenVPN | PKI | Build ta.key
  shell: openvpn --genkey --secret ta.key
  args:
    chdir: '{{ openvpn_ca_pki_dir }}'

- name: "Build DH"
  # expect:
  #   command: ./easyrsa gen-dh
  #   responses:
  #     "Overwrite": 'yes'
  #   timeout: 300 
  shell: ./easyrsa gen-dh
  args:
    chdir: '{{ openvpn_ca_dir }}'

# - name: OpenVPN | Add Clients | Get CA cert
#   fetch:
#     src: '{{ openvpn_ca_cert }}'
#     dest: "{{ playbook_dir }}/../fetched_creds/test/ca.crt"
#     flat: yes

- name: OpenVPN | Add Clients | Get CA cert
  fetch:
    src: "{{ openvpn_ca_cert }}"
    dest: "{{ local_creds_folder }}/ca@{{server_name}}.crt"
    flat: yes


# #### OpenVPN setup

# - name: OpenVPN | sysctl | Enable IPv4 traffic forwarding
#   sysctl:
#     name: net.ipv4.ip_forward
#     value: 1

# - name: OpenVPN | Configuration | Copy OpenVPN server configuration files into place
#   template:
#     src: etc_openvpn_server.conf.j2
#     dest: "{{ openvpn_ca_dir }}/{{ item.proto }}-{{ item.port }}.conf"
#   with_items: "{{ openvpn_instances }}"


# - name: OpenVPN | systemd | Enable services
#   service:
#     name: "openvpn@{{ item.proto }}-{{ item.port }}.service"
#     enabled: true
#   # shell: sudo systemctl enable openvpn@{{ item.proto }}-{{ item.port }}.service
#   with_items: "{{ openvpn_instances }}"




