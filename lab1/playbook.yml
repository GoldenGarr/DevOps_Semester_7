---
- hosts: app
  become: true
  vars:
    app_path: /opt/django-locallibrary-tutorial
  
  tasks:
    - name: install dependencies
      apt:
        name: "{{item}}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
    - name: add GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: add docker repository to apt
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu noble stable
        state: present
    - name: install docker
      apt:
        name: "{{item}}"
        state: latest
        update_cache: yes
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
    - name: check docker is active
      service:
        name: docker
        state: started
        enabled: yes

    - name: Check if Docker is installed
      command: docker --version
      register: docker_version_output
      ignore_errors: yes

    - name: Print Docker version
      debug:
        var: docker_version_output.stdout
      when: docker_version_output.rc == 0
  
    - name: Ensure git is installed
      apt:
        name: git
        state: present

    - name: Clone the repository
      git:
        repo: https://github.com/mdn/django-locallibrary-tutorial.git
        dest: /opt/django-locallibrary-tutorial
        update: yes
    - name: Ensure git is installed
      apt:
        name: git
        state: present

    - name: Clone the repository
      git:
        repo: https://github.com/mdn/django-locallibrary-tutorial.git
        dest: /opt/django-locallibrary-tutorial
        update: yes

  tasks:
  - name: Ansible Simple Variable Example Usage
    debug:
      msg: "!!!{{ app_path }}!!!"

  tasks:
    - name: Ensure Python 3 and pip are installed
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-pip
        - python3-venv

    - name: Install required python packages
      pip:
        requirements: "{{ app_path }}/requirements.txt"
        virtualenv: "{{ app_path }}/venv"
        virtualenv_command: python3 -m venv

    - name: Make Django migrations
      command: "{{ app_path }}/venv/bin/python {{ app_path }}/manage.py makemigrations"
      args:
        chdir: "{{ app_path }}"

    - name: Apply Django migrations
      command: "{{ app_path }}/venv/bin/python {{ app_path }}/manage.py migrate"
      args:
        chdir: "{{ app_path }}"

    - name: Collect static files
      command: "{{ app_path }}/venv/bin/python {{ app_path }}/manage.py collectstatic --noinput"
      args:
        chdir: "{{ app_path }}"

    - name: Run Django tests
      command: "{{ app_path }}/venv/bin/python {{ app_path }}/manage.py test"

    - name: Create Django superuser
      command: "{{ app_path }}/venv/bin/python {{ app_path }}/manage.py createsuperuser"
      args:
        chdir: "{{ app_path }}"
      ignore_errors: true

    - name: Start the Django application
      command: "{{ app_path }}/venv/bin/python {{ app_path }}/manage.py runserver"
      args:
        chdir: "{{ app_path }}"
      async: 300
      poll: 0